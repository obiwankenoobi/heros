#!/usr/bin/env node

/**
 * Module dependencies.
 */

const players = {}
let monsters = []

function Player(id, position, characterState) {
  this.id = id;
  this.position = position;
  this.characterState = characterState;
}

function Monster(id, position, monsterState, monsterCharacterId, row, col) {
  this.id = id;
  this.position = position;
  this.monsterState = monsterState;
  this.monsterCharacterId = monsterCharacterId;
  this.row = row;
  this.col = col;
}

for (let i = 0; i < 10; i++) {
  const monsterState = {
    monsterDirectionKeyDown: {
        37: false, 
        38: false,
        39: false,
        40: false
    },
    directionMonster:"40", 
    lastDirectionMonster:"40", 
  }
  const monster = new Monster(i, [45, 45], monsterState, 1, 1, 1)
  monsters.push(monster)
}

console.log("init new monsters")

for (let i = 0; i < monsters.length; i++) {
  const monster = monsters[i];
  moveMonster(i)
}

var app = require('../app');
var debug = require('debug')('heros:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);


function randomColor() {
  return '#'+Math.floor(Math.random()*16777215).toString(16);
}

function randomIntFromInterval(min,max) {
  return Math.floor(Math.random()*(max-min+1)+min);
}

function moveMonster(i) {
  setInterval(() => {

      const randomDirection = randomIntFromInterval(37, 40);
      monsters[i].monsterState.monsterDirectionKeyDown[randomDirection] = true;
      monsters[i].monsterState.directionMonster = randomDirection;
      monsters[i].monsterState.lastDirectionMonster = randomDirection.toString();

      for (const key in monsters[i].monsterState.monsterDirectionKeyDown) {
          if (key !== randomDirection.toString()) {
            monsters[i].monsterState.monsterDirectionKeyDown[key] = false;
          }
      }
      console.log("beat", monsters[0])
  }, 600)
}

function heartBeat(id) {
  if (monsters.length) {
    io.sockets.emit("heartbeat", { players, monsters })
  }
}


setInterval(heartBeat, 1000 / 60)
io.on('connection', socket => {
  
  socket.on("start", data => {
    const player = new Player(socket.id, data.position, data.characterState);
    players[socket.id] = player;
    io.to(`${socket.id}`).emit("start");
  });

  socket.on("move", data => {

    if (players[data.id]) {
      players[data.id].position = data.position;
      players[data.id].characterState = data.characterState;
    }
    //socket.broadcast.emit("move", players)
    monsters = data.monsters.length ? data.monsters : monsters;
    console.log("data.monsters", data.monsters)
  });

  socket.on('disconnect', () => {
    delete players[socket.id]
  });


});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
